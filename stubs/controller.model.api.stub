<?php

namespace {{ namespace }};
use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ rootNamespace }}Http\Resources\{{ model }}Resource;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use {{ rootNamespace }}Http\Requests\Store{{ model }}Request;
use {{ rootNamespace }}Http\Requests\Update{{ model }}Request;

use Illuminate\Support\Facades\Validator;

class {{ class }} extends Controller
{

    public static function routeName(){
        return Str::snake("{{model}}");
    }
    public function __construct(Request $request){
        parent::__construct($request);
        $this->authorizeResource({{ model }}::class,Str::snake("{{model}}"));
    }
    public function index(Request $request)
    {
        return {{ model }}Resource::collection({{ model }}::search($request)->sort($request)->paginate($this->pagination));
    }
    public function store(Store{{ model }}Request $request)
    {
        ${{ modelVariable }} = {{ model }}::create($request->validated());
        if ($request->translations) {
            foreach ($request->translations as $translation)
                ${{ modelVariable }}->setTranslation($translation['field'], $translation['locale'], $translation['value'])->save();
        }
        return new {{ model }}Resource(${{ modelVariable }});
    }
    public function show(Request $request,{{ model }} ${{ modelVariable }})
    {
        return new {{ model }}Resource(${{modelVariable}});
    }
    public function update(Update{{ model }}Request $request, {{ model }} ${{ modelVariable }})
    {
        ${{ modelVariable }}->update($request->validated());
          if ($request->translations) {
            foreach ($request->translations as $translation)
                ${{ modelVariable }}->setTranslation($translation['field'], $translation['locale'], $translation['value'])->save();
        }
        return new {{ model }}Resource(${{ modelVariable }});
    }
    public function destroy(Request $request,{{ model }} ${{ modelVariable }})
    {
        ${{ modelVariable }}->delete();
        return new {{ model }}Resource(${{ modelVariable }});
    }
}
