<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use Illuminate\Http\Request;
use {{ namespacedParentModel }};
use {{ rootNamespace }}Http\Resources\{{ model }}Resource;
use Illuminate\Support\Str;
use Illuminate\Support\Pluralizer;
use Illuminate\Support\Facades\Validator;
use {{ rootNamespace }}Http\Requests\Store{{ model }}Request;
use {{ rootNamespace }}Http\Requests\Update{{ model }}Request;
class {{ class }} extends BaseController
{
    public static function routeName(){
        return Str::snake("{{model}}");
    }
    public $childRelationName;
    public function __construct(Request $request)
    {
        parent::__construct($request);
        $this->childRelationName = Pluralizer::plural(Str::snake(array_slice(explode('\\', {{model}}::class), -1)[0]));
        $this->authorizeResource({{ model }}::class,Str::snake("{{model}}"));
    }
    public function index(Request $request,{{ parentModel }} ${{ parentModelVariable }})
    {
        $childRelationName = $this->childRelationName;
        return {{ model }}Resource::collection(${{ parentModelVariable }}->$childRelationName()->search($request)->sort($request)->paginate($this->pagination));
    }
    public function store(Store{{ model }}Request $request, {{ parentModel }} ${{ parentModelVariable }})
    {
        ${{ modelVariable }} = {{ model }}::create($request->validated());
        $childRelationName = $this->childRelationName;
        ${{ parentModelVariable }}->$childRelationName()->save(${{ modelVariable }});
        if ($request->translations) {
            foreach ($request->translations as $translation)
                ${{ modelVariable }}->setTranslation($translation['field'], $translation['locale'], $translation['value'])->save();
        }
        return new {{ model }}Resource(${{ modelVariable }});
    }
    public function show(Request $request,{{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        return new {{ model }}Resource(${{modelVariable}});
    }
    public function update(Update{{ model }}Request $request, {{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        ${{ modelVariable }}->update($request->validated());
        if ($request->translations) {
            foreach ($request->translations as $translation)
                ${{ modelVariable }}->setTranslation($translation['field'], $translation['locale'], $translation['value'])->save();
        }
        return new {{ model }}Resource(${{ modelVariable }});

    }

    public function destroy(Request $request,{{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        ${{ modelVariable }}->delete();
        return new {{ model }}Resource(${{ modelVariable }});
    }
}
